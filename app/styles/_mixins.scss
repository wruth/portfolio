
@mixin font-size ($decimalSize) {
    font-size: $decimalSize * 16px;
    font-size: $decimalSize * 1rem;
}

/**
 * Values for property in REM and PX with 1rem = 16px adapted from mixin by Karl
 * Merkli, and Josh Broton. This custom version will pass through any units that
 * are not rem or em. Unlike some other variants it will not reverse convert px
 * to rem.
 * http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
 * http://joshbroton.com/quick-fix-sass-mixins-for-rem-values-with-px-fallback/
 *
 * @inlcude rem-px(STRING PROPERTY, REMVAL1, REMVAL2, REMVAL3, REMVAL4)
 * @inlcude rem-px(margin, 1, 1, 2, 1.5) outputs or
 * @include rem-px(margin, 1rem, 1rem, 2rem, 1.5rem) outputs:
 * margin: 16px 16px 32px 24px;
 * margin: 1rem 1rem 2rem 1.5rem;
 */
@function strip-unit ($num) {
    @return $num / ($num * 0 + 1);
}

@function invert-direction ($direction) {
    @if $direction == left {
        @return right;
    } @else {
        @return left;
    }
}

@mixin rem-px ($property, $values...) {
    $max: length($values);
    $pxValues: '';
    $remValues: '';

    @for $i from 1 through $max {
        $rawValue: nth($values, $i);
        $value: strip-unit($rawValue);
        $unit: unit($rawValue);

        @if $value != 0 {
            @if $unit == rem or $unit == em {
                $pxValues: #{$pxValues + $value*16}px;
            } @else {
                $pxValues: #{$pxValues + $rawValue};
            }
            $remValues: #{$remValues + $rawValue};
        } @else {
            $pxValues: #{$pxValues + $value*16};
            $remValues: #{$remValues + $value};
        }

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
            $remValues: #{$remValues + " "};
        }
    }

    #{$property}: $pxValues;
    #{$property}: $remValues;
}

/**
 * Mixin for generating left and right scroller type arrows. Dimensions are
 * assumed to be rems.
 *
 * @property $direction 'left' or 'right' are the two valid values
 */
@mixin scroller-arrow ($arrowDirection, $width, $height, $color) {
    width: 0;
    height: 0;
    $direction: invert-direction($arrowDirection);
    @include rem-px(border-top-width, ($height / 2));
    border-top-style: solid;
    border-top-color: transparent;
    @include rem-px(border-bottom-width, ($height / 2));
    border-bottom-style: solid;
    border-bottom-color: transparent;
    @include rem-px(border-#{$direction}-width, $width);
    border-#{$direction}-style: solid;
    border-#{$direction}-color: $color;
    transition: border-#{$direction}-color 0.25s, opacity 0.5s;
}

@mixin scroller-nav ($arrowDirection) {
    @extend %scroller-nav;
    #{$arrowDirection}: 0;
    $direction: invert-direction($arrowDirection);
    transition: background-color 0.5s;
    @include background-image(linear-gradient($arrowDirection, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0.5)));

    .arrow {
        @extend %absolute-center;
        @include scroller-arrow($arrowDirection, $scrollerNavWidth, $scrollerNavHeight, rgba(255, 160, 0, 0.7));
    }

    &:hover {
        .arrow {
            border-#{$direction}-color: rgba(255, 160, 0, 1);
        }
    }

    &.disabled {
        cursor: default;
        pointer-events: none;
        .arrow {
            border-#{$direction}-color: rgba(255, 160, 0, 0);
        }
    }
}

//
// simple breakpoint mix-ins
// http://css-tricks.com/naming-media-queries/
// http://codepen.io/imathis/pen/BDzcI?editors=010
//

/**
 * min-width to apply a rule from
 */
@mixin at-least($device-width) {
    @media screen and (min-width: $device-width) {
        @content
    }
}

/**
 * max-width to apply a rule until
 */
@mixin until($device-width) {
    @media screen and (max-width: $device-width - 1) {
        @content
    }
}
